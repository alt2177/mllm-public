# generated by ChatGPT4

import pytest
import mllm
from datasets import load_dataset
import os
<<<<<<< HEAD
<<<<<<< HEAD
from typing import Type
=======
>>>>>>> f97b2ef44 (began testing MLLM.py)
=======
from typing import Type
>>>>>>> main

class TestMLLM:
    @pytest.fixture
    def mllm_instance(self):
        """Fixture to create an instance of the MLLM class."""
        return mllm.MLLM()

<<<<<<< HEAD
<<<<<<< HEAD
    def test_init(self, mllm_instance: Type[mllm.MLLM]):
=======
    def test_init(self, mllm_instance):
>>>>>>> f97b2ef44 (began testing MLLM.py)
=======
    def test_init(self, mllm_instance: Type[mllm.MLLM]):
>>>>>>> main
        """Test initialization of the MLLM class."""
        assert mllm_instance is not None
        assert mllm_instance.model is not None
        assert mllm_instance.dataset is not None

    def test_load_dataset_hf(self, mllm_instance):
        """Test loading a dataset from Hugging Face."""
        dataset = mllm_instance.load_dataset(hf_dataset_name="yelp_review_full")
        assert dataset is not None
        assert "train" in dataset
        assert "test" in dataset

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> b83eb4ba6 (debugged MLLM)
=======
>>>>>>> main
    # def test_load_dataset_local(self, tmp_path, mllm_instance):
    #     """Test loading a dataset from a local file."""
    #     # Create a dummy dataset file
    #     dataset_file = tmp_path / "cal_housing_data_clean.csv"
    #     dataset_file.write_text("dummy content")
    #     with pytest.raises(FileNotFoundError):
    #         mllm_instance.load_dataset(local_path=str(dataset_file))
<<<<<<< HEAD
<<<<<<< HEAD
=======
    def test_load_dataset_local(self, tmp_path, mllm_instance):
        """Test loading a dataset from a local file."""
        # Create a dummy dataset file
        dataset_file = tmp_path / "dummy_dataset.csv"
        dataset_file.write_text("dummy content")
        with pytest.raises(FileNotFoundError):
            mllm_instance.load_dataset(local_path=str(dataset_file))
>>>>>>> f97b2ef44 (began testing MLLM.py)
=======
>>>>>>> b83eb4ba6 (debugged MLLM)
=======
>>>>>>> main

    def test_tokenize_data(self, mllm_instance):
        """Test the tokenization process."""
        mllm_instance.load_dataset()  # Make sure there's a dataset to tokenize
        mllm_instance.tokenize_data()
        assert "input_ids" in mllm_instance.dataset["train"].features
        assert "attention_mask" in mllm_instance.dataset["train"].features

    def test_train_test_val_split(self, mllm_instance):
        """Test splitting of dataset into training, testing, and validation sets."""
        mllm_instance.load_dataset()
        train_dataset, test_dataset, val_dataset = mllm_instance.train_test_val_split(train_size=100, test_size=50, val_size=30)
        assert len(train_dataset) == 100
        assert len(test_dataset) == 50
        assert val_dataset is None or len(val_dataset) == 30

    def test_create_model(self, mllm_instance):
        """Test model creation."""
        model = mllm_instance.create_model()
        assert model is not None
        assert model.config.num_labels == 5

    def test_train(self, mllm_instance):
        """Test the training process."""
        # This is a simplified version. The actual test might need a mock or a small dataset due to time and resource constraints.
        mllm_instance.load_dataset()
        train_dataset, test_dataset = mllm_instance.train_test_val_split(train_size=100, test_size=50)
        mllm_instance.train(train_dataset, test_dataset)
        assert mllm_instance.result is not None
